{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Carolina/Desktop/digiClass/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class PersonaService {\n  constructor(http) {\n    this.http = http;\n    this.Url = 'http://localhost:3000';\n  }\n\n  extractData(res) {\n    // console.log(\"22\");\n    let body = JSON.parse('' + res); //console.log(\"23 A \" + body);\n\n    return body || {};\n  }\n\n  handleError(operation = 'operation', result) {\n    //console.log(\" ggggg \");\n    return error => {\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  } //-------------------------Persona-------------------------\n  //Listar Personas (CRUL)\n\n\n  getPersonas() {\n    return this.http.get(this.Url + \"/persona\", httpOptions);\n  } //Leer Persona (CRUL)\n\n\n  getPersona(id) {\n    return this.http.get(this.Url + \"/persona\" + id, httpOptions);\n  } //Crear Persona (CRUL)\n\n\n  postPersona(data) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.http.post(_this.Url + \"/persona\", data, httpOptions).toPromise();\n    })();\n  } //Actualizar Persona (CRUL)\n\n\n  updatePersona(data) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.http.put(_this2.Url + \"/persona\", data, httpOptions).toPromise();\n    })();\n  }\n\n}\n\nPersonaService.ɵfac = function PersonaService_Factory(t) {\n  return new (t || PersonaService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nPersonaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PersonaService,\n  factory: PersonaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Carolina/Desktop/digiClass/frontend/src/app/services/persona.service.ts"],"names":["HttpHeaders","of","i0","i1","httpOptions","headers","PersonaService","constructor","http","Url","extractData","res","body","JSON","parse","handleError","operation","result","error","console","log","message","getPersonas","get","getPersona","id","postPersona","data","post","toPromise","updatePersona","put","ɵfac","PersonaService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAE,IAAIL,WAAJ,CAAgB;AAAE,oBAAgB;AAAlB,GAAhB;AADO,CAApB;AAGA,OAAO,MAAMM,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,uBAAX;AACH;;AACDC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb;AACA,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKH,GAAhB,CAAX,CAFa,CAGb;;AACA,WAAOC,IAAI,IAAI,EAAf;AACH;;AACDG,EAAAA,WAAW,CAACC,SAAS,GAAG,WAAb,EAA0BC,MAA1B,EAAkC;AACzC;AACA,WAAQC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEJ,SAAU,YAAWE,KAAK,CAACG,OAAQ,EAAlD;AACA,aAAOpB,EAAE,CAACgB,MAAD,CAAT;AACH,KAHD;AAIH,GAjBuB,CAkBxB;AACA;;;AACAK,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKd,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,UAAzB,EAAqCL,WAArC,CAAP;AACH,GAtBuB,CAuBxB;;;AACAoB,EAAAA,UAAU,CAACC,EAAD,EAAK;AACX,WAAO,KAAKjB,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,UAAX,GAAwBgB,EAAtC,EAA0CrB,WAA1C,CAAP;AACH,GA1BuB,CA2BxB;;;AACMsB,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA;;AAAA;AACpB,aAAO,KAAI,CAACnB,IAAL,CAAUoB,IAAV,CAAe,KAAI,CAACnB,GAAL,GAAW,UAA1B,EAAsCkB,IAAtC,EAA4CvB,WAA5C,EAAyDyB,SAAzD,EAAP;AADoB;AAEvB,GA9BuB,CA+BxB;;;AACMC,EAAAA,aAAa,CAACH,IAAD,EAAO;AAAA;;AAAA;AACtB,aAAO,MAAI,CAACnB,IAAL,CAAUuB,GAAV,CAAc,MAAI,CAACtB,GAAL,GAAW,UAAzB,EAAqCkB,IAArC,EAA2CvB,WAA3C,EAAwDyB,SAAxD,EAAP;AADsB;AAEzB;;AAlCuB;;AAoC5BvB,cAAc,CAAC0B,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAI5B,cAAV,EAA0BJ,EAAE,CAACiC,QAAH,CAAYhC,EAAE,CAACiC,UAAf,CAA1B,CAAP;AAA+D,CAA1H;;AACA9B,cAAc,CAAC+B,KAAf,GAAuB,aAAcnC,EAAE,CAACoC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,cAAT;AAAyBkC,EAAAA,OAAO,EAAElC,cAAc,CAAC0B,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { of } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\nexport class PersonaService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.Url = 'http://localhost:3000';\r\n    }\r\n    extractData(res) {\r\n        // console.log(\"22\");\r\n        let body = JSON.parse('' + res);\r\n        //console.log(\"23 A \" + body);\r\n        return body || {};\r\n    }\r\n    handleError(operation = 'operation', result) {\r\n        //console.log(\" ggggg \");\r\n        return (error) => {\r\n            console.log(`${operation} failed: ${error.message}`);\r\n            return of(result);\r\n        };\r\n    }\r\n    //-------------------------Persona-------------------------\r\n    //Listar Personas (CRUL)\r\n    getPersonas() {\r\n        return this.http.get(this.Url + \"/persona\", httpOptions);\r\n    }\r\n    //Leer Persona (CRUL)\r\n    getPersona(id) {\r\n        return this.http.get(this.Url + \"/persona\" + id, httpOptions);\r\n    }\r\n    //Crear Persona (CRUL)\r\n    async postPersona(data) {\r\n        return this.http.post(this.Url + \"/persona\", data, httpOptions).toPromise();\r\n    }\r\n    //Actualizar Persona (CRUL)\r\n    async updatePersona(data) {\r\n        return this.http.put(this.Url + \"/persona\", data, httpOptions).toPromise();\r\n    }\r\n}\r\nPersonaService.ɵfac = function PersonaService_Factory(t) { return new (t || PersonaService)(i0.ɵɵinject(i1.HttpClient)); };\r\nPersonaService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PersonaService, factory: PersonaService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}