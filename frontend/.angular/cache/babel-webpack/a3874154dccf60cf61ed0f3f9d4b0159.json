{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Carolina/Desktop/digiClass/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AudioVisualService {\n  constructor(http) {\n    this.http = http;\n    this.Url = 'http://localhost:3000';\n  }\n\n  extractData(res) {\n    // console.log(\"22\");\n    let body = JSON.parse('' + res); //console.log(\"23 A \" + body);\n\n    return body || {};\n  }\n\n  handleError(operation = 'operation', result) {\n    //console.log(\" ggggg \");\n    return error => {\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  } //---------------------------Audio visual---------------------------//\n  // Método Listar AudioVisual\n\n\n  getAudioVisuales() {\n    return this.http.get(this.Url + \"/audiovisual\", httpOptions);\n  } // Método mostrar una AudioVisual\n\n\n  getAudioVisual(id) {\n    return this.http.get(this.Url + \"/audiovisual\" + id, httpOptions);\n  } //Crear una AudioVisual\n\n\n  insertAudioVisual(data) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.http.post(_this.Url + \"/audiovisual\", data, httpOptions).toPromise();\n      });\n    })();\n  } //Actualizar una AudioVisual\n\n\n  updateAudioVisual(data) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this2.http.put(_this2.Url + \"/audiovisual\", data, httpOptions).toPromise();\n      });\n    })();\n  }\n\n}\n\nAudioVisualService.ɵfac = function AudioVisualService_Factory(t) {\n  return new (t || AudioVisualService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAudioVisualService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AudioVisualService,\n  factory: AudioVisualService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Carolina/Desktop/digiClass/frontend/src/app/services/audio-visual.service.ts"],"names":["HttpHeaders","of","i0","i1","httpOptions","headers","AudioVisualService","constructor","http","Url","extractData","res","body","JSON","parse","handleError","operation","result","error","console","log","message","getAudioVisuales","get","getAudioVisual","id","insertAudioVisual","data","Promise","resolve","reject","post","toPromise","updateAudioVisual","put","ɵfac","AudioVisualService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAE,IAAIL,WAAJ,CAAgB;AAAE,oBAAgB;AAAlB,GAAhB;AADO,CAApB;AAGA,OAAO,MAAMM,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,uBAAX;AACH;;AACDC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb;AACA,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKH,GAAhB,CAAX,CAFa,CAGb;;AACA,WAAOC,IAAI,IAAI,EAAf;AACH;;AACDG,EAAAA,WAAW,CAACC,SAAS,GAAG,WAAb,EAA0BC,MAA1B,EAAkC;AACzC;AACA,WAAQC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEJ,SAAU,YAAWE,KAAK,CAACG,OAAQ,EAAlD;AACA,aAAOpB,EAAE,CAACgB,MAAD,CAAT;AACH,KAHD;AAIH,GAjB2B,CAkB5B;AACA;;;AACAK,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAKd,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,cAAzB,EAAyCL,WAAzC,CAAP;AACH,GAtB2B,CAuB5B;;;AACAoB,EAAAA,cAAc,CAACC,EAAD,EAAK;AACf,WAAO,KAAKjB,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,cAAX,GAA4BgB,EAA1C,EAA8CrB,WAA9C,CAAP;AACH,GA1B2B,CA2B5B;;;AACMsB,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AAAA;;AAAA;AAC1B,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,KAAI,CAACtB,IAAL,CAAUuB,IAAV,CAAe,KAAI,CAACtB,GAAL,GAAW,cAA1B,EAA0CkB,IAA1C,EAAgDvB,WAAhD,EAA6D4B,SAA7D;AACH,OAFM,CAAP;AAD0B;AAI7B,GAhC2B,CAiC5B;;;AACMC,EAAAA,iBAAiB,CAACN,IAAD,EAAO;AAAA;;AAAA;AAC1B,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,MAAI,CAACtB,IAAL,CAAU0B,GAAV,CAAc,MAAI,CAACzB,GAAL,GAAW,cAAzB,EAAyCkB,IAAzC,EAA+CvB,WAA/C,EAA4D4B,SAA5D;AACH,OAFM,CAAP;AAD0B;AAI7B;;AAtC2B;;AAwChC1B,kBAAkB,CAAC6B,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAI/B,kBAAV,EAA8BJ,EAAE,CAACoC,QAAH,CAAYnC,EAAE,CAACoC,UAAf,CAA9B,CAAP;AAAmE,CAAtI;;AACAjC,kBAAkB,CAACkC,KAAnB,GAA2B,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEpC,kBAAT;AAA6BqC,EAAAA,OAAO,EAAErC,kBAAkB,CAAC6B,IAAzD;AAA+DS,EAAAA,UAAU,EAAE;AAA3E,CAAtB,CAAzC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { of } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\nexport class AudioVisualService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.Url = 'http://localhost:3000';\r\n    }\r\n    extractData(res) {\r\n        // console.log(\"22\");\r\n        let body = JSON.parse('' + res);\r\n        //console.log(\"23 A \" + body);\r\n        return body || {};\r\n    }\r\n    handleError(operation = 'operation', result) {\r\n        //console.log(\" ggggg \");\r\n        return (error) => {\r\n            console.log(`${operation} failed: ${error.message}`);\r\n            return of(result);\r\n        };\r\n    }\r\n    //---------------------------Audio visual---------------------------//\r\n    // Método Listar AudioVisual\r\n    getAudioVisuales() {\r\n        return this.http.get(this.Url + \"/audiovisual\", httpOptions);\r\n    }\r\n    // Método mostrar una AudioVisual\r\n    getAudioVisual(id) {\r\n        return this.http.get(this.Url + \"/audiovisual\" + id, httpOptions);\r\n    }\r\n    //Crear una AudioVisual\r\n    async insertAudioVisual(data) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.post(this.Url + \"/audiovisual\", data, httpOptions).toPromise();\r\n        });\r\n    }\r\n    //Actualizar una AudioVisual\r\n    async updateAudioVisual(data) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.put(this.Url + \"/audiovisual\", data, httpOptions).toPromise();\r\n        });\r\n    }\r\n}\r\nAudioVisualService.ɵfac = function AudioVisualService_Factory(t) { return new (t || AudioVisualService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAudioVisualService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AudioVisualService, factory: AudioVisualService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}